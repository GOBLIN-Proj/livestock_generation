:py:mod:`livestock_generation.geo_livestock_generation.geo_livestock`
=====================================================================

.. py:module:: livestock_generation.geo_livestock_generation.geo_livestock

.. autoapi-nested-parse::

   ===============================
   Geo Livestock Generation Module
   ===============================

   This module is responsible for generating geographic-specific livestock data,
   including the management of cohorts, animal data calculations, and scenario-based
   projections for agricultural systems. It utilizes various data sources and
   models to compute exports, productivity, and sustainability metrics for livestock
   production under different environmental and management scenarios.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   livestock_generation.geo_livestock_generation.geo_livestock.Cohorts
   livestock_generation.geo_livestock_generation.geo_livestock.AnimalData




.. py:class:: Cohorts(ef_country, calibration_year, target_year, scenario_inputs_df)


   A class for managing cohorts within a livestock system. It generates dictionaries
   for cohorts and baseline cohorts, handles name conversions, and computes population
   coefficients and population in scenarios for a given year.

   .. attribute:: sc_class

      Instance for fetching scenario data.

      :type: ScenarioDataFetcher

   .. attribute:: loader_class

      Instance for loading necessary data.

      :type: Loader

   .. attribute:: data_manager_class

      Instance for managing livestock data.

      :type: DataManager

   .. attribute:: calibration_year

      Calibration year for the analysis.

      :type: int

   .. py:method:: generate_cohorts_dictionary()

      Generates a dictionary of cohorts from cattle herd data with aggregated values.

      :returns: A dictionary with cohort names as keys and aggregated data as values.
      :rtype: dict


   .. py:method:: generate_baseline_cohorts_dictionary()

      Generates a baseline dictionary of cohorts using the calibration year or a default
      if data for the calibration year is not available.

      :returns: A dictionary with cohort names as keys and population data as values for the baseline year.
      :rtype: dict


   .. py:method:: cohort_name_conversion(df)

      Converts the cohort names in a DataFrame according to a predefined conversion dictionary.

      :param df: The DataFrame with cohort names to be converted.
      :type df: pd.DataFrame

      :returns: The DataFrame with converted cohort names.
      :rtype: pd.DataFrame


   .. py:method:: compute_coef_cohort_population()

      Computes the coefficients for cohort populations based on the relationship of individual cohorts
      to the total population of beef and dairy adults.

      :returns: A dictionary with cohort names as keys and their population coefficients as values.
      :rtype: dict


   .. py:method:: compute_cohort_population_in_scenarios_for_year()

      Computes the cohort populations for each scenario in the target year, adjusting for
      different animal systems and their relationships.

      :returns: A DataFrame with cohort populations for each scenario.
      :rtype: pd.DataFrame



.. py:class:: AnimalData(ef_country, calibration_year, target_year, scenario_inputs_df)


   A class for managing animal data within a livestock system. It handles the creation of
   animal data DataFrames for different scenarios and baseline conditions.

   .. attribute:: cohorts_class

      Instance of Cohorts class for cohort management.

      :type: Cohorts

   .. attribute:: catchment

      The catchment name obtained from scenario data.

      :type: str

   .. attribute:: cohorts_api_class

      Instance of CatchmentCohorts class for catchment data.

      :type: CatchmentCohorts

   .. py:method:: get_element_from_productivity(lca_parameter_name, goblin_parameter_name, coef_for_parameter_from_scenario)

      Retrieves a specific parameter related to animal productivity, adjusted by a coefficient.

      :param lca_parameter_name: The name of the LCA parameter to retrieve.
      :type lca_parameter_name: str
      :param goblin_parameter_name: The name of the Goblin parameter to match.
      :type goblin_parameter_name: str
      :param coef_for_parameter_from_scenario: The coefficient to adjust the parameter value.
      :type coef_for_parameter_from_scenario: float

      :returns: The adjusted parameter value.
      :rtype: float


   .. py:method:: compute_concentrate(cohort, milk, weight)

      Computes the concentrate requirement for a given cohort based on milk production and weight.

      :param cohort: The cohort for which to compute concentrate.
      :type cohort: str
      :param milk: The milk production value.
      :type milk: float
      :param weight: The weight of the animals in the cohort.
      :type weight: float

      :returns: The concentrate requirement.
      :rtype: float


   .. py:method:: create_animal_dataframe()

      Creates a DataFrame containing detailed animal data for each scenario.

      :returns: A DataFrame with animal data for scenarios.
      :rtype: pd.DataFrame


   .. py:method:: create_baseline_animal_dataframe()

      Creates a DataFrame containing detailed animal data for the baseline condition.

      :returns: A DataFrame with baseline animal data.
      :rtype: pd.DataFrame



